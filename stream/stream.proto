syntax = "proto3";

import "metrics.proto";

package stream;


service Stream {
    rpc Stream (StreamRequest) returns (stream StreamEvent);
}

message StreamRequest {
    string name = 1; // stream name
    string requesterName = 2; //name of the service making the stream request
//    bool   expectHello = 3; // expect hello message from server side
    bool   disconnect_on_backpressure = 4; // disconnect consumer in case of backpressure
}

message StreamEvent {
    bytes Key    = 1; // Event key
    bytes Value  = 2; // Event value
    Metadata metadata = 3;
}

message Metadata {
    int64               EventTimestamp = 1; // timestamp in ns of when the event was recorded/created
    int64               OriginStreamTimestamp = 2;  // timestamp in ns of when the event was streamed by the first producer of the chain of streams
    int64               StreamTimestamp = 3; // timestamp in ns of when the event was streamed by the producer
    map<string, string> keyValue = 4;
}

message StreamDefinition {
    string name = 1;
    string dataType = 2;
    StreamType streamType = 3;
}

enum StreamType {
    UNKNOWN_STREAM_TYPE = 0;
    STREAM = 1;
    GET_AND_WATCH = 2;
}

message Metrics {
    repeated io.prometheus.client.MetricFamily metrics = 1;
}
